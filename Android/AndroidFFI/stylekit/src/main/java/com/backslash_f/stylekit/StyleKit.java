package com.backslash_f.stylekit;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.graphics.Typeface;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import java.util.Stack;



/**
 * Created by Fernando Fernandes on 09/03/17.
 * Copyright Â© 2017 backslash-f. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Fernando Fernandes
 */
public class StyleKit {
    // Colors
    static int green = Color.argb(255, 39, 155, 56);
    static int background = Color.argb(255, 238, 238, 238);
    static int white = Color.argb(255, 255, 255, 255);
    
    
    
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    // Tab
    
    private static class CacheForGoal {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 132f, 176f);
        private static RectF resizedFrame = new RectF();
        private static RectF circleBackgroundBezierRect = new RectF();
        private static Path circleBackgroundBezierPath = new Path();
        private static RectF circleProgressStrokeRect = new RectF();
        private static Path circleProgressStrokePath = new Path();
        private static RectF baseBezierRect = new RectF();
        private static Path baseBezierPath = new Path();
        private static RectF goalPercentageTextRect = new RectF();
        private static TextPaint goalPercentageTextTextPaint = new TextPaint();
        private static PaintCodeStaticLayout goalPercentageTextStaticLayout = new PaintCodeStaticLayout();
        private static RectF goalIconFlightBezierRect = new RectF();
        private static Path goalIconFlightBezierPath = new Path();
        private static RectF star3BezierRect = new RectF();
        private static Path star3BezierPath = new Path();
        private static RectF star2BezierRect = new RectF();
        private static Path star2BezierPath = new Path();
        private static RectF star1BezierRect = new RectF();
        private static Path star1BezierPath = new Path();
    }
    
    public static void drawGoal(Canvas canvas, Context context, float goalProgress) {
        StyleKit.drawGoal(canvas, context, new RectF(0f, 0f, 132f, 176f), ResizingBehavior.AspectFit, goalProgress);
    }
    
    public static void drawGoal(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, float goalProgress) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForGoal.paint;
        
        // Local Variables
        boolean goalCompleted = goalProgress == 1f ? true : false;
        float goalPercentNumber = goalProgress * 100f;
        String goalPercentText = String.valueOf((float) Math.round(goalPercentNumber)) + "%";
        float goalResultAngle = -1f * goalProgress * 279f;
        boolean goalPercentageVisible = goalProgress == 0f ? false : true;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForGoal.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForGoal.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 132f, resizedFrame.height() / 176f);
        
        // GoalGroup
        {
            // CircleBackgroundBezier
            RectF circleBackgroundBezierRect = CacheForGoal.circleBackgroundBezierRect;
            circleBackgroundBezierRect.set(7f, 41.75f, 125f, 158.75f);
            Path circleBackgroundBezierPath = CacheForGoal.circleBackgroundBezierPath;
            circleBackgroundBezierPath.reset();
            circleBackgroundBezierPath.addOval(circleBackgroundBezierRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(10f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.background);
            canvas.drawPath(circleBackgroundBezierPath, paint);
            canvas.restore();
            
            // CircleProgressStroke
            if (goalPercentageVisible) {
                RectF circleProgressStrokeRect = CacheForGoal.circleProgressStrokeRect;
                circleProgressStrokeRect.set(7f, 41.75f, 125f, 158.75f);
                Path circleProgressStrokePath = CacheForGoal.circleProgressStrokePath;
                circleProgressStrokePath.reset();
                circleProgressStrokePath.addArc(circleProgressStrokeRect, 133f, -(goalResultAngle + 227f) - 133f + (-(goalResultAngle + 227f) < 133f ? 360f * (float) Math.ceil((133f + (goalResultAngle + 227f)) / 360f) : 0f));
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(11f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.green);
                canvas.drawPath(circleProgressStrokePath, paint);
                canvas.restore();
            }
            
            // BaseBezier
            RectF baseBezierRect = CacheForGoal.baseBezierRect;
            baseBezierRect.set(5f, 138.28f, 129f, 174.75f);
            Path baseBezierPath = CacheForGoal.baseBezierPath;
            baseBezierPath.reset();
            baseBezierPath.moveTo(29.01f, 138.28f);
            baseBezierPath.lineTo(110.36f, 138.28f);
            baseBezierPath.cubicTo(109.43f, 138.28f, 113.46f, 138.28f, 117.09f, 139.47f);
            baseBezierPath.lineTo(117.79f, 139.64f);
            baseBezierPath.cubicTo(124.52f, 142.09f, 129f, 148.46f, 129f, 155.6f);
            baseBezierPath.cubicTo(129f, 156.51f, 129f, 156.51f, 129f, 156.51f);
            baseBezierPath.lineTo(129f, 156.51f);
            baseBezierPath.lineTo(129f, 156.51f);
            baseBezierPath.lineTo(129f, 157.43f);
            baseBezierPath.cubicTo(129f, 164.57f, 124.52f, 170.94f, 117.79f, 173.38f);
            baseBezierPath.cubicTo(113.46f, 174.75f, 109.43f, 174.75f, 101.38f, 174.75f);
            baseBezierPath.lineTo(23.64f, 174.75f);
            baseBezierPath.cubicTo(24.57f, 174.75f, 20.54f, 174.75f, 16.91f, 173.56f);
            baseBezierPath.lineTo(16.21f, 173.38f);
            baseBezierPath.cubicTo(9.48f, 170.94f, 5f, 164.57f, 5f, 157.43f);
            baseBezierPath.cubicTo(5f, 156.51f, 5f, 156.51f, 5f, 156.51f);
            baseBezierPath.lineTo(5f, 156.51f);
            baseBezierPath.lineTo(5f, 156.51f);
            baseBezierPath.lineTo(5f, 155.6f);
            baseBezierPath.cubicTo(5f, 148.46f, 9.48f, 142.09f, 16.21f, 139.64f);
            baseBezierPath.cubicTo(20.54f, 138.28f, 24.57f, 138.28f, 32.62f, 138.28f);
            baseBezierPath.lineTo(23.64f, 138.28f);
            baseBezierPath.lineTo(29.01f, 138.28f);
            baseBezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.green);
            canvas.drawPath(baseBezierPath, paint);
            
            // GoalPercentageText
            RectF goalPercentageTextRect = CacheForGoal.goalPercentageTextRect;
            goalPercentageTextRect.set(5f, 138.75f, 129f, 174.75f);
            TextPaint goalPercentageTextTextPaint = CacheForGoal.goalPercentageTextTextPaint;
            goalPercentageTextTextPaint.reset();
            goalPercentageTextTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
            goalPercentageTextTextPaint.setColor(StyleKit.white);
            goalPercentageTextTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
            goalPercentageTextTextPaint.setTextSize(20f);
            StaticLayout goalPercentageTextStaticLayout = CacheForGoal.goalPercentageTextStaticLayout.get((int) goalPercentageTextRect.width(), Layout.Alignment.ALIGN_CENTER, goalPercentText, goalPercentageTextTextPaint);
            canvas.save();
            canvas.clipRect(goalPercentageTextRect);
            canvas.translate(goalPercentageTextRect.left, goalPercentageTextRect.top + (goalPercentageTextRect.height() - goalPercentageTextStaticLayout.getHeight()) / 2f);
            goalPercentageTextStaticLayout.draw(canvas);
            canvas.restore();
            
            // GoalIconFlightBezier
            canvas.save();
            canvas.translate(42.8f, 77.31f);
            currentTransformation.peek().postTranslate(42.8f, 77.31f);
            canvas.scale(1.1f, 1.1f);
            currentTransformation.peek().postScale(1.1f, 1.1f);
            RectF goalIconFlightBezierRect = CacheForGoal.goalIconFlightBezierRect;
            goalIconFlightBezierRect.set(0f, 0f, 42.51f, 40.73f);
            Path goalIconFlightBezierPath = CacheForGoal.goalIconFlightBezierPath;
            goalIconFlightBezierPath.reset();
            goalIconFlightBezierPath.moveTo(39.61f, 36.1f);
            goalIconFlightBezierPath.lineTo(42.51f, 33.32f);
            goalIconFlightBezierPath.lineTo(31.43f, 16.17f);
            goalIconFlightBezierPath.cubicTo(41.07f, 6.84f, 42.15f, 3.36f, 40.58f, 1.85f);
            goalIconFlightBezierPath.cubicTo(39.01f, 0.35f, 35.37f, 1.38f, 25.64f, 10.62f);
            goalIconFlightBezierPath.lineTo(7.73f, 0f);
            goalIconFlightBezierPath.lineTo(4.83f, 2.78f);
            goalIconFlightBezierPath.lineTo(19.45f, 16.78f);
            goalIconFlightBezierPath.cubicTo(14.91f, 21.49f, 10.46f, 26.52f, 7.46f, 30.4f);
            goalIconFlightBezierPath.lineTo(1.66f, 28.03f);
            goalIconFlightBezierPath.lineTo(0f, 29.62f);
            goalIconFlightBezierPath.lineTo(4.77f, 34.19f);
            goalIconFlightBezierPath.cubicTo(3.87f, 35.67f, 3.5f, 36.68f, 3.86f, 37.03f);
            goalIconFlightBezierPath.cubicTo(4.23f, 37.37f, 5.28f, 37.02f, 6.82f, 36.16f);
            goalIconFlightBezierPath.lineTo(11.59f, 40.73f);
            goalIconFlightBezierPath.lineTo(13.25f, 39.14f);
            goalIconFlightBezierPath.lineTo(10.78f, 33.58f);
            goalIconFlightBezierPath.cubicTo(14.84f, 30.71f, 20.08f, 26.45f, 25f, 22.1f);
            goalIconFlightBezierPath.lineTo(39.61f, 36.1f);
            goalIconFlightBezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            goalIconFlightBezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.green);
            canvas.drawPath(goalIconFlightBezierPath, paint);
            canvas.restore();
            
            // StarsGroup
            if (goalCompleted) {
                // Star3Bezier
                RectF star3BezierRect = CacheForGoal.star3BezierRect;
                star3BezierRect.set(86.13f, 10.88f, 106.88f, 30.63f);
                Path star3BezierPath = CacheForGoal.star3BezierPath;
                star3BezierPath.reset();
                star3BezierPath.moveTo(96.5f, 10.88f);
                star3BezierPath.lineTo(99.55f, 16.76f);
                star3BezierPath.lineTo(106.37f, 17.7f);
                star3BezierPath.lineTo(101.43f, 22.28f);
                star3BezierPath.lineTo(102.6f, 28.74f);
                star3BezierPath.lineTo(96.5f, 25.69f);
                star3BezierPath.lineTo(90.4f, 28.74f);
                star3BezierPath.lineTo(91.57f, 22.28f);
                star3BezierPath.lineTo(86.63f, 17.7f);
                star3BezierPath.lineTo(93.45f, 16.76f);
                star3BezierPath.lineTo(96.5f, 10.88f);
                star3BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star3BezierPath, paint);
                
                // Star2Bezier
                RectF star2BezierRect = CacheForGoal.star2BezierRect;
                star2BezierRect.set(52.25f, 1f, 79.75f, 28.5f);
                Path star2BezierPath = CacheForGoal.star2BezierPath;
                star2BezierPath.reset();
                star2BezierPath.moveTo(66f, 1f);
                star2BezierPath.lineTo(70.04f, 9.19f);
                star2BezierPath.lineTo(79.08f, 10.5f);
                star2BezierPath.lineTo(72.54f, 16.87f);
                star2BezierPath.lineTo(74.08f, 25.87f);
                star2BezierPath.lineTo(66f, 21.63f);
                star2BezierPath.lineTo(57.92f, 25.87f);
                star2BezierPath.lineTo(59.46f, 16.87f);
                star2BezierPath.lineTo(52.92f, 10.5f);
                star2BezierPath.lineTo(61.96f, 9.19f);
                star2BezierPath.lineTo(66f, 1f);
                star2BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star2BezierPath, paint);
                
                // Star1Bezier
                RectF star1BezierRect = CacheForGoal.star1BezierRect;
                star1BezierRect.set(25.13f, 10.88f, 45.88f, 30.63f);
                Path star1BezierPath = CacheForGoal.star1BezierPath;
                star1BezierPath.reset();
                star1BezierPath.moveTo(35.5f, 10.88f);
                star1BezierPath.lineTo(38.55f, 16.76f);
                star1BezierPath.lineTo(45.37f, 17.7f);
                star1BezierPath.lineTo(40.43f, 22.28f);
                star1BezierPath.lineTo(41.6f, 28.74f);
                star1BezierPath.lineTo(35.5f, 25.69f);
                star1BezierPath.lineTo(29.4f, 28.74f);
                star1BezierPath.lineTo(30.57f, 22.28f);
                star1BezierPath.lineTo(25.63f, 17.7f);
                star1BezierPath.lineTo(32.45f, 16.76f);
                star1BezierPath.lineTo(35.5f, 10.88f);
                star1BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star1BezierPath, paint);
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForResizableGoal {
        private static RectF symbolRect = new RectF();
        private static RectF symbolTargetRect = new RectF();
    }
    
    
    public static void drawResizableGoal(Canvas canvas, Context context, RectF frame, float resizableGoalProgress) {
        // Symbol
        RectF symbolRect = CacheForResizableGoal.symbolRect;
        symbolRect.set(frame.left + 1f,
            frame.top + 1f,
            frame.left + 1f + (float) Math.floor((frame.width() - 1f) * 0.99225f + 0.5f),
            frame.top + 1f + (float) Math.floor((frame.height() - 1f) * 0.99422f + 0.5f));
        canvas.save();
        canvas.clipRect(symbolRect);
        canvas.translate(symbolRect.left, symbolRect.top);
        RectF symbolTargetRect = CacheForResizableGoal.symbolTargetRect;
        symbolTargetRect.set(0f, 0f, symbolRect.width(), symbolRect.height());
        StyleKit.drawGoal(canvas, context, symbolTargetRect, ResizingBehavior.Stretch, resizableGoalProgress);
        canvas.restore();
    }
    
    
    // Canvas Images
    // Tab
    
    public static Bitmap imageOfGoal(Context context, float goalProgress) {
        Bitmap imageOfGoal = Bitmap.createBitmap(132, 176, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfGoal);
        StyleKit.drawGoal(canvas, context, goalProgress);
        
        return imageOfGoal;
    }
    
    public static Bitmap imageOfResizableGoal(Context context, PointF imageSize, float resizableGoalProgress) {
        Bitmap imageOfResizableGoal = Bitmap.createBitmap((int) imageSize.x, (int) imageSize.y, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfResizableGoal);
        StyleKit.drawResizableGoal(canvas, context, new RectF(0f, 0f, imageSize.x, imageSize.y), resizableGoalProgress);
        
        return imageOfResizableGoal;
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}

class PaintCodeStaticLayout {
    private StaticLayout layout;
    private int width;
    private Layout.Alignment alignment;
    private CharSequence source;
    private TextPaint paint;
    
    StaticLayout get(int width, Layout.Alignment alignment, CharSequence source, TextPaint paint) {
        if (this.layout == null || this.width != width || this.alignment != alignment || !this.source.equals(source) || !this.paint.equals(paint)) {
            this.width = width;
            this.alignment = alignment;
            this.source = source;
            this.paint = paint;
            this.layout = new StaticLayout(source, paint, width, alignment, 1, 0, false);
        }
        return this.layout;
    }
}
