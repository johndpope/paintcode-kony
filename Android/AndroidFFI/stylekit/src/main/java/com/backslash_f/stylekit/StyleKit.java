package com.backslash_f.stylekit;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.graphics.Typeface;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;



/**
 * Created by Fernando Fernandes on 08/03/17.
 * Copyright Â© 2017 backslash-f. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Fernando Fernandes
 */
public class StyleKit {
    // Colors
    static int green = Color.argb(255, 39, 155, 56);
    static int background = Color.argb(255, 238, 238, 238);
    static int white = Color.argb(255, 255, 255, 255);
    
    
    
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    // Tab
    
    private static class CacheForGoal {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 68f, 88f);
        private static RectF resizedFrame = new RectF();
        private static RectF circleBackgroundBezierRect = new RectF();
        private static Path circleBackgroundBezierPath = new Path();
        private static RectF circleProgressStrokeRect = new RectF();
        private static Path circleProgressStrokePath = new Path();
        private static RectF baseBezierRect = new RectF();
        private static Path baseBezierPath = new Path();
        private static RectF goalPercentageTextRect = new RectF();
        private static TextPaint goalPercentageTextTextPaint = new TextPaint();
        private static PaintCodeStaticLayout goalPercentageTextStaticLayout = new PaintCodeStaticLayout();
        private static RectF goalIconFlightBezierRect = new RectF();
        private static Path goalIconFlightBezierPath = new Path();
        private static RectF star3BezierRect = new RectF();
        private static Path star3BezierPath = new Path();
        private static RectF star2BezierRect = new RectF();
        private static Path star2BezierPath = new Path();
        private static RectF star1BezierRect = new RectF();
        private static Path star1BezierPath = new Path();
    }
    
    public static void drawGoal(Canvas canvas, Context context, float goalProgress) {
        StyleKit.drawGoal(canvas, context, new RectF(0f, 0f, 68f, 88f), ResizingBehavior.AspectFit, goalProgress);
    }
    
    public static void drawGoal(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing, float goalProgress) {
        // General Declarations
        Paint paint = CacheForGoal.paint;
        
        // Local Variables
        float goalPercentNumber = goalProgress * 100f;
        String goalPercentText = String.valueOf((float) Math.round(goalPercentNumber)) + "%";
        boolean goalPercentageVisible = goalProgress == 0f ? false : true;
        float goalResultAngle = -1f * goalProgress * 279f;
        boolean goalCompleted = goalProgress == 1f ? true : false;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForGoal.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForGoal.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 68f, resizedFrame.height() / 88f);
        
        // GoalGroup
        {
            // CircleBackgroundBezier
            RectF circleBackgroundBezierRect = CacheForGoal.circleBackgroundBezierRect;
            circleBackgroundBezierRect.set(5f, 21f, 63f, 79f);
            Path circleBackgroundBezierPath = CacheForGoal.circleBackgroundBezierPath;
            circleBackgroundBezierPath.reset();
            circleBackgroundBezierPath.addOval(circleBackgroundBezierRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(7f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.background);
            canvas.drawPath(circleBackgroundBezierPath, paint);
            canvas.restore();
            
            // CircleProgressStroke
            if (goalPercentageVisible) {
                RectF circleProgressStrokeRect = CacheForGoal.circleProgressStrokeRect;
                circleProgressStrokeRect.set(5f, 21f, 63f, 79f);
                Path circleProgressStrokePath = CacheForGoal.circleProgressStrokePath;
                circleProgressStrokePath.reset();
                circleProgressStrokePath.addArc(circleProgressStrokeRect, 133f, -(goalResultAngle + 227f) - 133f + (-(goalResultAngle + 227f) < 133f ? 360f * (float) Math.ceil((133f + (goalResultAngle + 227f)) / 360f) : 0f));
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(7f);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.green);
                canvas.drawPath(circleProgressStrokePath, paint);
                canvas.restore();
            }
            
            // BaseBezier
            RectF baseBezierRect = CacheForGoal.baseBezierRect;
            baseBezierRect.set(4f, 69f, 65f, 87f);
            Path baseBezierPath = CacheForGoal.baseBezierPath;
            baseBezierPath.reset();
            baseBezierPath.moveTo(15.81f, 69f);
            baseBezierPath.lineTo(55.83f, 69f);
            baseBezierPath.cubicTo(55.37f, 69f, 57.35f, 69f, 59.14f, 69.59f);
            baseBezierPath.lineTo(59.49f, 69.67f);
            baseBezierPath.cubicTo(62.8f, 70.88f, 65f, 74.03f, 65f, 77.55f);
            baseBezierPath.cubicTo(65f, 78f, 65f, 78f, 65f, 78f);
            baseBezierPath.lineTo(65f, 78f);
            baseBezierPath.lineTo(65f, 78f);
            baseBezierPath.lineTo(65f, 78.45f);
            baseBezierPath.cubicTo(65f, 81.97f, 62.8f, 85.12f, 59.49f, 86.33f);
            baseBezierPath.cubicTo(57.35f, 87f, 55.37f, 87f, 51.41f, 87f);
            baseBezierPath.lineTo(13.17f, 87f);
            baseBezierPath.cubicTo(13.63f, 87f, 11.65f, 87f, 9.86f, 86.41f);
            baseBezierPath.lineTo(9.51f, 86.33f);
            baseBezierPath.cubicTo(6.2f, 85.12f, 4f, 81.97f, 4f, 78.45f);
            baseBezierPath.cubicTo(4f, 78f, 4f, 78f, 4f, 78f);
            baseBezierPath.lineTo(4f, 78f);
            baseBezierPath.lineTo(4f, 78f);
            baseBezierPath.lineTo(4f, 77.55f);
            baseBezierPath.cubicTo(4f, 74.03f, 6.2f, 70.88f, 9.51f, 69.67f);
            baseBezierPath.cubicTo(11.65f, 69f, 13.63f, 69f, 17.59f, 69f);
            baseBezierPath.lineTo(13.17f, 69f);
            baseBezierPath.lineTo(15.81f, 69f);
            baseBezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.green);
            canvas.drawPath(baseBezierPath, paint);
            
            // GoalPercentageText
            RectF goalPercentageTextRect = CacheForGoal.goalPercentageTextRect;
            goalPercentageTextRect.set(6f, 73f, 64f, 83f);
            TextPaint goalPercentageTextTextPaint = CacheForGoal.goalPercentageTextTextPaint;
            goalPercentageTextTextPaint.reset();
            goalPercentageTextTextPaint.setColor(StyleKit.white);
            goalPercentageTextTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
            goalPercentageTextTextPaint.setTextSize(12f);
            StaticLayout goalPercentageTextStaticLayout = CacheForGoal.goalPercentageTextStaticLayout.get((int) goalPercentageTextRect.width(), Layout.Alignment.ALIGN_CENTER, goalPercentText, goalPercentageTextTextPaint);
            canvas.save();
            canvas.clipRect(goalPercentageTextRect);
            canvas.translate(goalPercentageTextRect.left, goalPercentageTextRect.top + (goalPercentageTextRect.height() - goalPercentageTextStaticLayout.getHeight()) / 2f);
            goalPercentageTextStaticLayout.draw(canvas);
            canvas.restore();
            
            // GoalIconFlightBezier
            RectF goalIconFlightBezierRect = CacheForGoal.goalIconFlightBezierRect;
            goalIconFlightBezierRect.set(23.09f, 39.9f, 44f, 60f);
            Path goalIconFlightBezierPath = CacheForGoal.goalIconFlightBezierPath;
            goalIconFlightBezierPath.reset();
            goalIconFlightBezierPath.moveTo(42.57f, 57.72f);
            goalIconFlightBezierPath.lineTo(44f, 56.34f);
            goalIconFlightBezierPath.lineTo(38.55f, 47.88f);
            goalIconFlightBezierPath.cubicTo(43.29f, 43.27f, 43.82f, 41.56f, 43.05f, 40.81f);
            goalIconFlightBezierPath.cubicTo(42.28f, 40.07f, 40.49f, 40.58f, 35.7f, 45.14f);
            goalIconFlightBezierPath.lineTo(26.89f, 39.9f);
            goalIconFlightBezierPath.lineTo(25.46f, 41.27f);
            goalIconFlightBezierPath.lineTo(32.65f, 48.18f);
            goalIconFlightBezierPath.cubicTo(30.42f, 50.51f, 28.23f, 52.99f, 26.76f, 54.9f);
            goalIconFlightBezierPath.lineTo(23.9f, 53.73f);
            goalIconFlightBezierPath.lineTo(23.09f, 54.52f);
            goalIconFlightBezierPath.lineTo(25.44f, 56.77f);
            goalIconFlightBezierPath.cubicTo(24.99f, 57.5f, 24.81f, 58f, 24.99f, 58.17f);
            goalIconFlightBezierPath.cubicTo(25.17f, 58.34f, 25.69f, 58.17f, 26.44f, 57.74f);
            goalIconFlightBezierPath.lineTo(28.79f, 60f);
            goalIconFlightBezierPath.lineTo(29.61f, 59.22f);
            goalIconFlightBezierPath.lineTo(28.39f, 56.47f);
            goalIconFlightBezierPath.cubicTo(30.39f, 55.06f, 32.96f, 52.95f, 35.38f, 50.8f);
            goalIconFlightBezierPath.lineTo(42.57f, 57.72f);
            goalIconFlightBezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            goalIconFlightBezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.green);
            canvas.drawPath(goalIconFlightBezierPath, paint);
            
            // StarsGroup
            if (goalCompleted) {
                // Star3Bezier
                RectF star3BezierRect = CacheForGoal.star3BezierRect;
                star3BezierRect.set(44.13f, 6.13f, 53.88f, 15.88f);
                Path star3BezierPath = CacheForGoal.star3BezierPath;
                star3BezierPath.reset();
                star3BezierPath.moveTo(49f, 6.13f);
                star3BezierPath.lineTo(50.43f, 9.03f);
                star3BezierPath.lineTo(53.64f, 9.49f);
                star3BezierPath.lineTo(51.32f, 11.75f);
                star3BezierPath.lineTo(51.87f, 14.94f);
                star3BezierPath.lineTo(49f, 13.44f);
                star3BezierPath.lineTo(46.13f, 14.94f);
                star3BezierPath.lineTo(46.68f, 11.75f);
                star3BezierPath.lineTo(44.36f, 9.49f);
                star3BezierPath.lineTo(47.57f, 9.03f);
                star3BezierPath.lineTo(49f, 6.13f);
                star3BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star3BezierPath, paint);
                
                // Star2Bezier
                RectF star2BezierRect = CacheForGoal.star2BezierRect;
                star2BezierRect.set(27.25f, 1.25f, 40.75f, 14.75f);
                Path star2BezierPath = CacheForGoal.star2BezierPath;
                star2BezierPath.reset();
                star2BezierPath.moveTo(34f, 1.25f);
                star2BezierPath.lineTo(35.98f, 5.27f);
                star2BezierPath.lineTo(40.42f, 5.91f);
                star2BezierPath.lineTo(37.21f, 9.04f);
                star2BezierPath.lineTo(37.97f, 13.46f);
                star2BezierPath.lineTo(34f, 11.38f);
                star2BezierPath.lineTo(30.03f, 13.46f);
                star2BezierPath.lineTo(30.79f, 9.04f);
                star2BezierPath.lineTo(27.58f, 5.91f);
                star2BezierPath.lineTo(32.02f, 5.27f);
                star2BezierPath.lineTo(34f, 1.25f);
                star2BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star2BezierPath, paint);
                
                // Star1Bezier
                RectF star1BezierRect = CacheForGoal.star1BezierRect;
                star1BezierRect.set(14.13f, 6.13f, 23.88f, 15.88f);
                Path star1BezierPath = CacheForGoal.star1BezierPath;
                star1BezierPath.reset();
                star1BezierPath.moveTo(19f, 6.13f);
                star1BezierPath.lineTo(20.43f, 9.03f);
                star1BezierPath.lineTo(23.64f, 9.49f);
                star1BezierPath.lineTo(21.32f, 11.75f);
                star1BezierPath.lineTo(21.87f, 14.94f);
                star1BezierPath.lineTo(19f, 13.44f);
                star1BezierPath.lineTo(16.13f, 14.94f);
                star1BezierPath.lineTo(16.68f, 11.75f);
                star1BezierPath.lineTo(14.36f, 9.49f);
                star1BezierPath.lineTo(17.57f, 9.03f);
                star1BezierPath.lineTo(19f, 6.13f);
                star1BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star1BezierPath, paint);
            }
        }
        
        canvas.restore();
    }
    
    
    // Canvas Images
    // Tab
    
    public static Bitmap imageOfGoal(Context context, float goalProgress) {
        Bitmap imageOfGoal = Bitmap.createBitmap(68, 88, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfGoal);
        StyleKit.drawGoal(canvas, context, goalProgress);
        
        return imageOfGoal;
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}

class PaintCodeStaticLayout {
    private StaticLayout layout;
    private int width;
    private Layout.Alignment alignment;
    private CharSequence source;
    private TextPaint paint;
    
    StaticLayout get(int width, Layout.Alignment alignment, CharSequence source, TextPaint paint) {
        if (this.layout == null || this.width != width || this.alignment != alignment || !this.source.equals(source) || !this.paint.equals(paint)) {
            this.width = width;
            this.alignment = alignment;
            this.source = source;
            this.paint = paint;
            this.layout = new StaticLayout(source, paint, width, alignment, 1, 0, false);
        }
        return this.layout;
    }
}
