package com.backslash_f.stylekit;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.graphics.Typeface;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import java.lang.ref.WeakReference;

/**
 * Created by Fernando Fernandes on 06/03/17.
 * Copyright Â© 2017 backslash-f. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Fernando Fernandes
 */
public class StyleKit {
    // Colors
    static int green = Color.argb(255, 39, 155, 56);
    static int background = Color.argb(255, 238, 238, 238);
    static int white = Color.argb(255, 255, 255, 255);
    
    
    private static class GlobalCache {
        static PaintCodeBitmap example = new PaintCodeBitmap();
    }
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    // Tab
    
    private static class CacheForGoal {
        private static Paint paint = new Paint();
        private static RectF goalGroup = new RectF();
        private static RectF circleBackgroundBezierRect = new RectF();
        private static Path circleBackgroundBezierPath = new Path();
        private static RectF circleProgressStrokeRect = new RectF();
        private static Path circleProgressStrokePath = new Path();
        private static RectF baseBezierRect = new RectF();
        private static Path baseBezierPath = new Path();
        private static RectF goalPercentageTextRect = new RectF();
        private static TextPaint goalPercentageTextTextPaint = new TextPaint();
        private static PaintCodeStaticLayout goalPercentageTextStaticLayout = new PaintCodeStaticLayout();
        private static RectF goalIconFlightBezierRect = new RectF();
        private static Path goalIconFlightBezierPath = new Path();
        private static RectF starsGroup = new RectF();
        private static RectF star3BezierRect = new RectF();
        private static Path star3BezierPath = new Path();
        private static RectF star2BezierRect = new RectF();
        private static Path star2BezierPath = new Path();
        private static RectF star1BezierRect = new RectF();
        private static Path star1BezierPath = new Path();
    }
    
    
    public static void drawGoal(Canvas canvas, Context context, RectF frame, float goalPercentTextSize, float goalPercentageStrokeSize, float goalProgress) {
        // General Declarations
        Paint paint = CacheForGoal.paint;

        // Local Variables
        float goalPercentNumber = goalProgress * 100f;
        String goalPercentText = String.valueOf((float) Math.round(goalPercentNumber)) + "%";
        float goalResultAngle = -1f * goalProgress * 279f;
        boolean goalCompleted = goalProgress == 1f ? true : false;
        boolean goalPercentageVisible = goalProgress == 0f ? false : true;
        
        // GoalGroup
        {
            RectF goalGroup = CacheForGoal.goalGroup;
            goalGroup.set(frame.left + 1f,
                frame.top + 1f,
                frame.left + 1f + (float) Math.floor((frame.width() - 1f) * 0.98507f + 0.5f),
                frame.top + 1f + (float) Math.floor((frame.height() - 1f) * 0.98851f + 0.5f));
            
            // CircleBackgroundBezier
            RectF circleBackgroundBezierRect = CacheForGoal.circleBackgroundBezierRect;
            circleBackgroundBezierRect.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.06061f + 0.5f),
                goalGroup.top + (float) Math.floor(goalGroup.height() * 0.23256f + 0.5f),
                goalGroup.left + (float) Math.floor(goalGroup.width() * 0.93939f + 0.5f),
                goalGroup.top + (float) Math.floor(goalGroup.height() * 0.90698f + 0.5f));
            Path circleBackgroundBezierPath = CacheForGoal.circleBackgroundBezierPath;
            circleBackgroundBezierPath.reset();
            circleBackgroundBezierPath.addOval(circleBackgroundBezierRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(goalPercentageStrokeSize);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.background);
            canvas.drawPath(circleBackgroundBezierPath, paint);
            canvas.restore();
            
            // CircleProgressStroke
            if (goalPercentageVisible) {
                RectF circleProgressStrokeRect = CacheForGoal.circleProgressStrokeRect;
                circleProgressStrokeRect.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.06061f + 0.5f),
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.23256f + 0.5f),
                    goalGroup.left + (float) Math.floor(goalGroup.width() * 0.93939f + 0.5f),
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.90698f + 0.5f));
                Path circleProgressStrokePath = CacheForGoal.circleProgressStrokePath;
                circleProgressStrokePath.reset();
                circleProgressStrokePath.addArc(circleProgressStrokeRect, 133f, -(goalResultAngle + 227f) - 133f + (-(goalResultAngle + 227f) < 133f ? 360f * (float) Math.ceil((133f + (goalResultAngle + 227f)) / 360f) : 0f));
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(goalPercentageStrokeSize);
                paint.setStrokeCap(Paint.Cap.ROUND);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.green);
                canvas.drawPath(circleProgressStrokePath, paint);
                canvas.restore();
            }
            
            // BaseBezier
            RectF baseBezierRect = CacheForGoal.baseBezierRect;
            baseBezierRect.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.04545f - 0.5f) + 1f,
                goalGroup.top + (float) Math.floor(goalGroup.height() * 0.7907f + 0.5f),
                goalGroup.left + (float) Math.floor(goalGroup.width() * 0.9697f - 0.5f) + 1f,
                goalGroup.top + (float) Math.floor(goalGroup.height() + 0.5f));
            Path baseBezierPath = CacheForGoal.baseBezierPath;
            baseBezierPath.reset();
            baseBezierPath.moveTo(goalGroup.left + goalGroup.width() * 0.22439f, goalGroup.top + goalGroup.height() * 0.7907f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.83073f, goalGroup.top + goalGroup.height() * 0.7907f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.82382f, goalGroup.top + goalGroup.height() * 0.7907f, goalGroup.left + goalGroup.width() * 0.85383f, goalGroup.top + goalGroup.height() * 0.7907f, goalGroup.left + goalGroup.width() * 0.8809f, goalGroup.top + goalGroup.height() * 0.79755f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.88614f, goalGroup.top + goalGroup.height() * 0.79854f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.93631f, goalGroup.top + goalGroup.height() * 0.81255f, goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.84915f, goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.89012f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.89535f, goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.89535f, goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.89535f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.89535f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.89535f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.90058f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.9697f, goalGroup.top + goalGroup.height() * 0.94155f, goalGroup.left + goalGroup.width() * 0.93631f, goalGroup.top + goalGroup.height() * 0.97815f, goalGroup.left + goalGroup.width() * 0.88614f, goalGroup.top + goalGroup.height() * 0.99216f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.85383f, goalGroup.top + goalGroup.height(), goalGroup.left + goalGroup.width() * 0.82382f, goalGroup.top + goalGroup.height(), goalGroup.left + goalGroup.width() * 0.7638f, goalGroup.top + goalGroup.height());
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.18442f, goalGroup.top + goalGroup.height());
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.19133f, goalGroup.top + goalGroup.height(), goalGroup.left + goalGroup.width() * 0.16132f, goalGroup.top + goalGroup.height(), goalGroup.left + goalGroup.width() * 0.13425f, goalGroup.top + goalGroup.height() * 0.99315f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.12901f, goalGroup.top + goalGroup.height() * 0.99216f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.07884f, goalGroup.top + goalGroup.height() * 0.97815f, goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.94155f, goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.90058f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.89535f, goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.89535f, goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.89535f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.89535f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.89535f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.89012f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.04545f, goalGroup.top + goalGroup.height() * 0.84915f, goalGroup.left + goalGroup.width() * 0.07884f, goalGroup.top + goalGroup.height() * 0.81255f, goalGroup.left + goalGroup.width() * 0.12901f, goalGroup.top + goalGroup.height() * 0.79854f);
            baseBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.16132f, goalGroup.top + goalGroup.height() * 0.7907f, goalGroup.left + goalGroup.width() * 0.19133f, goalGroup.top + goalGroup.height() * 0.7907f, goalGroup.left + goalGroup.width() * 0.25135f, goalGroup.top + goalGroup.height() * 0.7907f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.18442f, goalGroup.top + goalGroup.height() * 0.7907f);
            baseBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.22439f, goalGroup.top + goalGroup.height() * 0.7907f);
            baseBezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.green);
            canvas.drawPath(baseBezierPath, paint);
            
            // GoalPercentageText
            RectF goalPercentageTextRect = CacheForGoal.goalPercentageTextRect;
            goalPercentageTextRect.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.07576f + 0.5f),
                goalGroup.top + (float) Math.floor(goalGroup.height() * 0.83721f + 0.5f),
                goalGroup.left + (float) Math.floor(goalGroup.width() * 0.95455f + 0.5f),
                goalGroup.top + (float) Math.floor(goalGroup.height() * 0.95349f + 0.5f));
            TextPaint goalPercentageTextTextPaint = CacheForGoal.goalPercentageTextTextPaint;
            goalPercentageTextTextPaint.reset();
            goalPercentageTextTextPaint.setColor(StyleKit.white);
            goalPercentageTextTextPaint.setTypeface(Typeface.create((String) null, Typeface.NORMAL));
            goalPercentageTextTextPaint.setTextSize(goalPercentTextSize);
            StaticLayout goalPercentageTextStaticLayout = CacheForGoal.goalPercentageTextStaticLayout.get((int) goalPercentageTextRect.width(), Layout.Alignment.ALIGN_CENTER, goalPercentText, goalPercentageTextTextPaint);
            canvas.save();
            canvas.clipRect(goalPercentageTextRect);
            canvas.translate(goalPercentageTextRect.left, goalPercentageTextRect.top + (goalPercentageTextRect.height() - goalPercentageTextStaticLayout.getHeight()) / 2f);
            goalPercentageTextStaticLayout.draw(canvas);
            canvas.restore();
            
            // GoalIconFlightBezier
            RectF goalIconFlightBezierRect = CacheForGoal.goalIconFlightBezierRect;
            goalIconFlightBezierRect.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.33465f + 0.41f) + 0.09f,
                goalGroup.top + (float) Math.floor(goalGroup.height() * 0.45232f - 0.4f) + 0.9f,
                goalGroup.left + (float) Math.floor(goalGroup.width() * 0.65152f + 0.5f) + 0f,
                goalGroup.top + (float) Math.floor(goalGroup.height() * 0.68605f + 0.5f) + 0f);
            Path goalIconFlightBezierPath = CacheForGoal.goalIconFlightBezierPath;
            goalIconFlightBezierPath.reset();
            goalIconFlightBezierPath.moveTo(goalGroup.left + goalGroup.width() * 0.62991f, goalGroup.top + goalGroup.height() * 0.65948f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.65152f, goalGroup.top + goalGroup.height() * 0.64354f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.56888f, goalGroup.top + goalGroup.height() * 0.5451f);
            goalIconFlightBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.64079f, goalGroup.top + goalGroup.height() * 0.49156f, goalGroup.left + goalGroup.width() * 0.64883f, goalGroup.top + goalGroup.height() * 0.47159f, goalGroup.left + goalGroup.width() * 0.63712f, goalGroup.top + goalGroup.height() * 0.46294f);
            goalIconFlightBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.62538f, goalGroup.top + goalGroup.height() * 0.4543f, goalGroup.left + goalGroup.width() * 0.59831f, goalGroup.top + goalGroup.height() * 0.46023f, goalGroup.left + goalGroup.width() * 0.52573f, goalGroup.top + goalGroup.height() * 0.51327f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.39227f, goalGroup.top + goalGroup.height() * 0.45232f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.37066f, goalGroup.top + goalGroup.height() * 0.46826f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.4796f, goalGroup.top + goalGroup.height() * 0.54861f);
            goalIconFlightBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.44575f, goalGroup.top + goalGroup.height() * 0.57566f, goalGroup.left + goalGroup.width() * 0.4126f, goalGroup.top + goalGroup.height() * 0.60448f, goalGroup.left + goalGroup.width() * 0.39024f, goalGroup.top + goalGroup.height() * 0.62675f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.347f, goalGroup.top + goalGroup.height() * 0.61319f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.33465f, goalGroup.top + goalGroup.height() * 0.6223f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.37024f, goalGroup.top + goalGroup.height() * 0.64854f);
            goalIconFlightBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.36354f, goalGroup.top + goalGroup.height() * 0.65699f, goalGroup.left + goalGroup.width() * 0.36078f, goalGroup.top + goalGroup.height() * 0.66281f, goalGroup.left + goalGroup.width() * 0.36345f, goalGroup.top + goalGroup.height() * 0.6648f);
            goalIconFlightBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.36615f, goalGroup.top + goalGroup.height() * 0.66678f, goalGroup.left + goalGroup.width() * 0.37405f, goalGroup.top + goalGroup.height() * 0.66474f, goalGroup.left + goalGroup.width() * 0.3855f, goalGroup.top + goalGroup.height() * 0.6598f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.42107f, goalGroup.top + goalGroup.height() * 0.68605f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.43342f, goalGroup.top + goalGroup.height() * 0.67694f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.41504f, goalGroup.top + goalGroup.height() * 0.64505f);
            goalIconFlightBezierPath.cubicTo(goalGroup.left + goalGroup.width() * 0.44523f, goalGroup.top + goalGroup.height() * 0.62855f, goalGroup.left + goalGroup.width() * 0.4843f, goalGroup.top + goalGroup.height() * 0.6041f, goalGroup.left + goalGroup.width() * 0.52097f, goalGroup.top + goalGroup.height() * 0.57913f);
            goalIconFlightBezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.62991f, goalGroup.top + goalGroup.height() * 0.65948f);
            goalIconFlightBezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            goalIconFlightBezierPath.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.green);
            canvas.drawPath(goalIconFlightBezierPath, paint);
            
            // StarsGroup
            if (goalCompleted) {
                RectF starsGroup = CacheForGoal.starsGroup;
                starsGroup.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.19886f + 0.38f) + 0.13f,
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.00291f + 0.25f) + 0.25f,
                    goalGroup.left + (float) Math.floor(goalGroup.width() * 0.80114f - 0.38f) + 0.88f,
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.17297f - 0.38f) + 0.88f);
                
                // Star3Bezier
                RectF star3BezierRect = CacheForGoal.star3BezierRect;
                star3BezierRect.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.65341f + 0.38f) + 0.13f,
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.05959f + 0.38f) + 0.13f,
                    goalGroup.left + (float) Math.floor(goalGroup.width() * 0.80114f - 0.38f) + 0.88f,
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.17297f - 0.38f) + 0.88f);
                Path star3BezierPath = CacheForGoal.star3BezierPath;
                star3BezierPath.reset();
                star3BezierPath.moveTo(goalGroup.left + goalGroup.width() * 0.72727f, goalGroup.top + goalGroup.height() * 0.05959f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.74898f, goalGroup.top + goalGroup.height() * 0.09335f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.79752f, goalGroup.top + goalGroup.height() * 0.09876f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.7624f, goalGroup.top + goalGroup.height() * 0.12504f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.77069f, goalGroup.top + goalGroup.height() * 0.16214f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.72727f, goalGroup.top + goalGroup.height() * 0.14462f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.68386f, goalGroup.top + goalGroup.height() * 0.16214f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.69215f, goalGroup.top + goalGroup.height() * 0.12504f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.65702f, goalGroup.top + goalGroup.height() * 0.09876f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.70556f, goalGroup.top + goalGroup.height() * 0.09335f);
                star3BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.72727f, goalGroup.top + goalGroup.height() * 0.05959f);
                star3BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star3BezierPath, paint);
                
                // Star2Bezier
                RectF star2BezierRect = CacheForGoal.star2BezierRect;
                star2BezierRect.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.39773f + 0.25f) + 0.25f,
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.00291f + 0.25f) + 0.25f,
                    goalGroup.left + (float) Math.floor(goalGroup.width() * 0.60227f - 0.25f) + 0.75f,
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.15988f - 0.25f) + 0.75f);
                Path star2BezierPath = CacheForGoal.star2BezierPath;
                star2BezierPath.reset();
                star2BezierPath.moveTo(goalGroup.left + goalGroup.width() * 0.5f, goalGroup.top + goalGroup.height() * 0.00291f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.53006f, goalGroup.top + goalGroup.height() * 0.04965f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.59727f, goalGroup.top + goalGroup.height() * 0.05714f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.54863f, goalGroup.top + goalGroup.height() * 0.09352f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.56011f, goalGroup.top + goalGroup.height() * 0.14489f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.5f, goalGroup.top + goalGroup.height() * 0.12064f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.43989f, goalGroup.top + goalGroup.height() * 0.14489f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.45137f, goalGroup.top + goalGroup.height() * 0.09352f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.40273f, goalGroup.top + goalGroup.height() * 0.05714f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.46994f, goalGroup.top + goalGroup.height() * 0.04965f);
                star2BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.5f, goalGroup.top + goalGroup.height() * 0.00291f);
                star2BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star2BezierPath, paint);
                
                // Star1Bezier
                RectF star1BezierRect = CacheForGoal.star1BezierRect;
                star1BezierRect.set(goalGroup.left + (float) Math.floor(goalGroup.width() * 0.19886f + 0.38f) + 0.13f,
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.05959f + 0.38f) + 0.13f,
                    goalGroup.left + (float) Math.floor(goalGroup.width() * 0.34659f - 0.38f) + 0.88f,
                    goalGroup.top + (float) Math.floor(goalGroup.height() * 0.17297f - 0.38f) + 0.88f);
                Path star1BezierPath = CacheForGoal.star1BezierPath;
                star1BezierPath.reset();
                star1BezierPath.moveTo(goalGroup.left + goalGroup.width() * 0.27273f, goalGroup.top + goalGroup.height() * 0.05959f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.29444f, goalGroup.top + goalGroup.height() * 0.09335f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.34298f, goalGroup.top + goalGroup.height() * 0.09876f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.30785f, goalGroup.top + goalGroup.height() * 0.12504f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.31614f, goalGroup.top + goalGroup.height() * 0.16214f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.27273f, goalGroup.top + goalGroup.height() * 0.14462f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.22931f, goalGroup.top + goalGroup.height() * 0.16214f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.2376f, goalGroup.top + goalGroup.height() * 0.12504f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.20248f, goalGroup.top + goalGroup.height() * 0.09876f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.25102f, goalGroup.top + goalGroup.height() * 0.09335f);
                star1BezierPath.lineTo(goalGroup.left + goalGroup.width() * 0.27273f, goalGroup.top + goalGroup.height() * 0.05959f);
                star1BezierPath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.green);
                canvas.drawPath(star1BezierPath, paint);
            }
        }
    }
    
    
    // Canvas Images
    // Tab
    
    public static Bitmap imageOfGoal(Context context, PointF imageSize, float goalPercentTextSize, float goalPercentageStrokeSize, float goalProgress) {
        Bitmap imageOfGoal = Bitmap.createBitmap((int) imageSize.x, (int) imageSize.y, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfGoal);
        StyleKit.drawGoal(canvas, context, new RectF(0f, 0f, imageSize.x, imageSize.y), goalPercentTextSize, goalPercentageStrokeSize, goalProgress);
        
        return imageOfGoal;
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}

class PaintCodeBitmap {
    private BitmapShader shader;
    private Bitmap bitmap;
    private RectF bounds;
    private int resource;
    private WeakReference<Context> context;
    
    PaintCodeBitmap get(Context context, int resource) {
        if (this.context == null || this.context.get() != context || this.resource != resource) {
            this.context = new WeakReference<>(context);
            this.resource = resource;
            this.bitmap = BitmapFactory.decodeResource(context.getResources(), resource);
            this.bounds = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
            this.shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
        }
        return this;
    }
    
    PaintCodeBitmap get(Bitmap bitmap) {
        if (this.bitmap != bitmap) {
            this.context = null;
            this.resource = 0;
            this.bitmap = bitmap;
            this.bounds = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
            this.shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
        }
        return this;
    }
    
    BitmapShader getShader() {
        return this.shader;
    }
    
    RectF getBounds() {
        return this.bounds;
    }
}


class PaintCodeStaticLayout {
    private StaticLayout layout;
    private int width;
    private Layout.Alignment alignment;
    private CharSequence source;
    private TextPaint paint;
    
    StaticLayout get(int width, Layout.Alignment alignment, CharSequence source, TextPaint paint) {
        if (this.layout == null || this.width != width || this.alignment != alignment || !this.source.equals(source) || !this.paint.equals(paint)) {
            this.width = width;
            this.alignment = alignment;
            this.source = source;
            this.paint = paint;
            this.layout = new StaticLayout(source, paint, width, alignment, 1, 0, false);
        }
        return this.layout;
    }
}
