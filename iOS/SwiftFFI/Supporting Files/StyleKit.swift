//
//  StyleKit.swift
//  PaintCodeKony
//
//  Created by Fernando Fernandes on 28/02/17.
//  Copyright Â© 2017 backslash-f. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let green: UIColor = UIColor(red: 0.153, green: 0.608, blue: 0.220, alpha: 1.000)
        static let background: UIColor = UIColor(red: 0.933, green: 0.933, blue: 0.933, alpha: 1.000)
        static let white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    public dynamic class var green: UIColor { return Cache.green }
    public dynamic class var background: UIColor { return Cache.background }
    public dynamic class var white: UIColor { return Cache.white }

    //// Drawing Methods

    public dynamic class func drawGoal(frame: CGRect = CGRect(x: 0, y: 0, width: 68, height: 88), goalPercentTextSize: CGFloat = 12, goalPercentageStrokeSize: CGFloat = 7, goalProgress: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Variable Declarations
        let goalCompleted = goalProgress == 1 ? true : false
        let goalPercentageVisible = goalProgress == 0 ? false : true
        let goalPercentNumber: CGFloat = goalProgress * 100
        let goalPercentText = "\(Int(round(goalPercentNumber)))" + "%"
        let goalResultAngle: CGFloat = -1 * goalProgress * 279


        //// Subframes
        let goalGroup: CGRect = CGRect(x: frame.minX + 1, y: frame.minY + 1, width: fastFloor((frame.width - 1) * 0.98507 + 0.5), height: fastFloor((frame.height - 1) * 0.98851 + 0.5))


        //// GoalGroup
        //// CircleBackgroundBezier Drawing
        let circleBackgroundBezierPath = UIBezierPath(ovalIn: CGRect(x: goalGroup.minX + fastFloor(goalGroup.width * 0.06061 + 0.5), y: goalGroup.minY + fastFloor(goalGroup.height * 0.23256 + 0.5), width: fastFloor(goalGroup.width * 0.93939 + 0.5) - fastFloor(goalGroup.width * 0.06061 + 0.5), height: fastFloor(goalGroup.height * 0.90698 + 0.5) - fastFloor(goalGroup.height * 0.23256 + 0.5)))
        StyleKit.background.setStroke()
        circleBackgroundBezierPath.lineWidth = goalPercentageStrokeSize
        circleBackgroundBezierPath.stroke()


        if (goalPercentageVisible) {
            //// CircleProgressStroke Drawing
            let circleProgressStrokeRect = CGRect(x: goalGroup.minX + fastFloor(goalGroup.width * 0.06061 + 0.5), y: goalGroup.minY + fastFloor(goalGroup.height * 0.23256 + 0.5), width: fastFloor(goalGroup.width * 0.93939 + 0.5) - fastFloor(goalGroup.width * 0.06061 + 0.5), height: fastFloor(goalGroup.height * 0.90698 + 0.5) - fastFloor(goalGroup.height * 0.23256 + 0.5))
            let circleProgressStrokePath = UIBezierPath()
            circleProgressStrokePath.addArc(withCenter: CGPoint(x: circleProgressStrokeRect.midX, y: circleProgressStrokeRect.midY), radius: circleProgressStrokeRect.width / 2, startAngle: 133 * CGFloat.pi/180, endAngle: -(goalResultAngle + 227) * CGFloat.pi/180, clockwise: true)

            StyleKit.green.setStroke()
            circleProgressStrokePath.lineWidth = goalPercentageStrokeSize
            circleProgressStrokePath.lineCapStyle = .round
            circleProgressStrokePath.stroke()
        }


        //// BaseBezier Drawing
        let baseBezierPath = UIBezierPath()
        baseBezierPath.move(to: CGPoint(x: goalGroup.minX + 0.22439 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.83073 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.88090 * goalGroup.width, y: goalGroup.minY + 0.79755 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.82382 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.85383 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.88614 * goalGroup.width, y: goalGroup.minY + 0.79854 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.89012 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.93631 * goalGroup.width, y: goalGroup.minY + 0.81255 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.84915 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.90058 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.88614 * goalGroup.width, y: goalGroup.minY + 0.99216 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.96970 * goalGroup.width, y: goalGroup.minY + 0.94155 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.93631 * goalGroup.width, y: goalGroup.minY + 0.97815 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.76380 * goalGroup.width, y: goalGroup.minY + 1.00000 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.85383 * goalGroup.width, y: goalGroup.minY + 1.00000 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.82382 * goalGroup.width, y: goalGroup.minY + 1.00000 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.18442 * goalGroup.width, y: goalGroup.minY + 1.00000 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.13425 * goalGroup.width, y: goalGroup.minY + 0.99315 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.19133 * goalGroup.width, y: goalGroup.minY + 1.00000 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.16132 * goalGroup.width, y: goalGroup.minY + 1.00000 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.12901 * goalGroup.width, y: goalGroup.minY + 0.99216 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.90058 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.07884 * goalGroup.width, y: goalGroup.minY + 0.97815 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.94155 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.89535 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.89012 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.12901 * goalGroup.width, y: goalGroup.minY + 0.79854 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.04545 * goalGroup.width, y: goalGroup.minY + 0.84915 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.07884 * goalGroup.width, y: goalGroup.minY + 0.81255 * goalGroup.height))
        baseBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.25135 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.16132 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.19133 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.18442 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height))
        baseBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.22439 * goalGroup.width, y: goalGroup.minY + 0.79070 * goalGroup.height))
        baseBezierPath.close()
        StyleKit.green.setFill()
        baseBezierPath.fill()


        //// GoalPercentageText Drawing
        let goalPercentageTextRect = CGRect(x: goalGroup.minX + fastFloor(goalGroup.width * 0.07576 + 0.5), y: goalGroup.minY + fastFloor(goalGroup.height * 0.83721 + 0.5), width: fastFloor(goalGroup.width * 0.95455 + 0.5) - fastFloor(goalGroup.width * 0.07576 + 0.5), height: fastFloor(goalGroup.height * 0.95349 + 0.5) - fastFloor(goalGroup.height * 0.83721 + 0.5))
        let goalPercentageTextStyle = NSMutableParagraphStyle()
        goalPercentageTextStyle.alignment = .center
        let goalPercentageTextFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: goalPercentTextSize), NSForegroundColorAttributeName: StyleKit.white, NSParagraphStyleAttributeName: goalPercentageTextStyle]

        let goalPercentageTextTextHeight: CGFloat = goalPercentText.boundingRect(with: CGSize(width: goalPercentageTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: goalPercentageTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: goalPercentageTextRect)
        goalPercentText.draw(in: CGRect(x: goalPercentageTextRect.minX, y: goalPercentageTextRect.minY + (goalPercentageTextRect.height - goalPercentageTextTextHeight) / 2, width: goalPercentageTextRect.width, height: goalPercentageTextTextHeight), withAttributes: goalPercentageTextFontAttributes)
        context.restoreGState()


        //// GoalIconFlightBezier Drawing
        let goalIconFlightBezierPath = UIBezierPath()
        goalIconFlightBezierPath.move(to: CGPoint(x: goalGroup.minX + 0.62991 * goalGroup.width, y: goalGroup.minY + 0.65948 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.65152 * goalGroup.width, y: goalGroup.minY + 0.64354 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.56888 * goalGroup.width, y: goalGroup.minY + 0.54510 * goalGroup.height))
        goalIconFlightBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.63712 * goalGroup.width, y: goalGroup.minY + 0.46294 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.64079 * goalGroup.width, y: goalGroup.minY + 0.49156 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.64883 * goalGroup.width, y: goalGroup.minY + 0.47159 * goalGroup.height))
        goalIconFlightBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.52573 * goalGroup.width, y: goalGroup.minY + 0.51327 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.62538 * goalGroup.width, y: goalGroup.minY + 0.45430 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.59831 * goalGroup.width, y: goalGroup.minY + 0.46023 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.39227 * goalGroup.width, y: goalGroup.minY + 0.45232 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.37066 * goalGroup.width, y: goalGroup.minY + 0.46826 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.47960 * goalGroup.width, y: goalGroup.minY + 0.54861 * goalGroup.height))
        goalIconFlightBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.39024 * goalGroup.width, y: goalGroup.minY + 0.62675 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.44575 * goalGroup.width, y: goalGroup.minY + 0.57566 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.41260 * goalGroup.width, y: goalGroup.minY + 0.60448 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.34700 * goalGroup.width, y: goalGroup.minY + 0.61319 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.33465 * goalGroup.width, y: goalGroup.minY + 0.62230 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.37024 * goalGroup.width, y: goalGroup.minY + 0.64854 * goalGroup.height))
        goalIconFlightBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.36345 * goalGroup.width, y: goalGroup.minY + 0.66480 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.36354 * goalGroup.width, y: goalGroup.minY + 0.65699 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.36078 * goalGroup.width, y: goalGroup.minY + 0.66281 * goalGroup.height))
        goalIconFlightBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.38550 * goalGroup.width, y: goalGroup.minY + 0.65980 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.36615 * goalGroup.width, y: goalGroup.minY + 0.66678 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.37405 * goalGroup.width, y: goalGroup.minY + 0.66474 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.42107 * goalGroup.width, y: goalGroup.minY + 0.68605 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.43342 * goalGroup.width, y: goalGroup.minY + 0.67694 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.41504 * goalGroup.width, y: goalGroup.minY + 0.64505 * goalGroup.height))
        goalIconFlightBezierPath.addCurve(to: CGPoint(x: goalGroup.minX + 0.52097 * goalGroup.width, y: goalGroup.minY + 0.57913 * goalGroup.height), controlPoint1: CGPoint(x: goalGroup.minX + 0.44523 * goalGroup.width, y: goalGroup.minY + 0.62855 * goalGroup.height), controlPoint2: CGPoint(x: goalGroup.minX + 0.48430 * goalGroup.width, y: goalGroup.minY + 0.60410 * goalGroup.height))
        goalIconFlightBezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.62991 * goalGroup.width, y: goalGroup.minY + 0.65948 * goalGroup.height))
        goalIconFlightBezierPath.close()
        goalIconFlightBezierPath.usesEvenOddFillRule = true
        StyleKit.green.setFill()
        goalIconFlightBezierPath.fill()


        if (goalCompleted) {
            //// StarsGroup
            //// Star3Bezier Drawing
            let star3BezierPath = UIBezierPath()
            star3BezierPath.move(to: CGPoint(x: goalGroup.minX + 0.72727 * goalGroup.width, y: goalGroup.minY + 0.05959 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.74898 * goalGroup.width, y: goalGroup.minY + 0.09335 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.79752 * goalGroup.width, y: goalGroup.minY + 0.09876 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.76240 * goalGroup.width, y: goalGroup.minY + 0.12504 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.77069 * goalGroup.width, y: goalGroup.minY + 0.16214 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.72727 * goalGroup.width, y: goalGroup.minY + 0.14462 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.68386 * goalGroup.width, y: goalGroup.minY + 0.16214 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.69215 * goalGroup.width, y: goalGroup.minY + 0.12504 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.65702 * goalGroup.width, y: goalGroup.minY + 0.09876 * goalGroup.height))
            star3BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.70556 * goalGroup.width, y: goalGroup.minY + 0.09335 * goalGroup.height))
            star3BezierPath.close()
            StyleKit.green.setFill()
            star3BezierPath.fill()


            //// Star2Bezier Drawing
            let star2BezierPath = UIBezierPath()
            star2BezierPath.move(to: CGPoint(x: goalGroup.minX + 0.50000 * goalGroup.width, y: goalGroup.minY + 0.00291 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.53006 * goalGroup.width, y: goalGroup.minY + 0.04965 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.59727 * goalGroup.width, y: goalGroup.minY + 0.05714 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.54863 * goalGroup.width, y: goalGroup.minY + 0.09352 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.56011 * goalGroup.width, y: goalGroup.minY + 0.14489 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.50000 * goalGroup.width, y: goalGroup.minY + 0.12064 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.43989 * goalGroup.width, y: goalGroup.minY + 0.14489 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.45137 * goalGroup.width, y: goalGroup.minY + 0.09352 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.40273 * goalGroup.width, y: goalGroup.minY + 0.05714 * goalGroup.height))
            star2BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.46994 * goalGroup.width, y: goalGroup.minY + 0.04965 * goalGroup.height))
            star2BezierPath.close()
            StyleKit.green.setFill()
            star2BezierPath.fill()


            //// Star1Bezier Drawing
            let star1BezierPath = UIBezierPath()
            star1BezierPath.move(to: CGPoint(x: goalGroup.minX + 0.27273 * goalGroup.width, y: goalGroup.minY + 0.05959 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.29444 * goalGroup.width, y: goalGroup.minY + 0.09335 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.34298 * goalGroup.width, y: goalGroup.minY + 0.09876 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.30785 * goalGroup.width, y: goalGroup.minY + 0.12504 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.31614 * goalGroup.width, y: goalGroup.minY + 0.16214 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.27273 * goalGroup.width, y: goalGroup.minY + 0.14462 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.22931 * goalGroup.width, y: goalGroup.minY + 0.16214 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.23760 * goalGroup.width, y: goalGroup.minY + 0.12504 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.20248 * goalGroup.width, y: goalGroup.minY + 0.09876 * goalGroup.height))
            star1BezierPath.addLine(to: CGPoint(x: goalGroup.minX + 0.25102 * goalGroup.width, y: goalGroup.minY + 0.09335 * goalGroup.height))
            star1BezierPath.close()
            StyleKit.green.setFill()
            star1BezierPath.fill()


        }
    }

    //// Generated Images

    public dynamic class func imageOfGoal(imageSize: CGSize = CGSize(width: 68, height: 88), goalPercentTextSize: CGFloat = 12, goalPercentageStrokeSize: CGFloat = 7, goalProgress: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            StyleKit.drawGoal(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), goalPercentTextSize: goalPercentTextSize, goalPercentageStrokeSize: goalPercentageStrokeSize, goalProgress: goalProgress)

        let imageOfGoal = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfGoal
    }

}
